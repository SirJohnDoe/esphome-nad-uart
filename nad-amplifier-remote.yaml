substitutions:
  devicename: nad
  upper_devicename: NAD

esphome:
  name: nadrs232
  friendly_name: nadrs232
  includes:
    - uart_read_line_sensor.h
  on_boot:
    then:
      - uart.write: "\rMain.Power?\r"
      - uart.write: "\rMain.SpeakerA?\r"
      - uart.write: "\rMain.SpeakerB?\r"
      - uart.write: "\rMain.Mute?\r"
      - uart.write: "\rMain.Source?\r"
      - uart.write: "\rMain.Volume?\r"

esp8266:
  board: d1_mini_lite

# Enable logging
logger:
  level: VERBOSE #makes uart stream available in esphome logstream
  baud_rate: 0 #disable logging over uart

# Enable Home Assistant API
api:
  services:
  - service: write
    variables:
      command: string
    then:
      - uart.write:
          id: uart_bus
          data: !lambda |-
              std::size_t pos;
              std::string str = command;
              while ((pos = str.find("\\r")) != std::string::npos)
                str.replace(pos, 2, "\r");
              std::vector<uint8_t> vec(str.begin(), str.end());
              return vec; 
              
ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
    
uart:
  id: uart_bus
  rx_pin: 0
  tx_pin: 2
  baud_rate: 115200

text_sensor:
- platform: custom
  lambda: |-
    auto my_custom_sensor = new UartReadLineSensor(id(uart_bus));
    App.register_component(my_custom_sensor);
    return {my_custom_sensor};
  text_sensors:
    id: "uart_readline"
    on_value:
      then:
      - lambda: |-
              std::string sensorState = id(uart_readline).state;
              if (sensorState.length() > 0) {
                size_t index = sensorState.find("Main.Volume=");
                if (index != std::string::npos) {
                  std::string floatValueStr = sensorState.substr(index + 12);
                  float floatValue = atof(floatValueStr.c_str());
                  id(current_volume).publish_state(floatValue);
                }
              }
              
- platform: template
  name: "Volume String"
  id: volume_string

number:
  - platform: template
    name: "Current Volume"
    id: current_volume
    min_value: -70
    max_value: 0
    step: 0.5
    icon: "mdi:volume-high"
    set_action:
      then:
      - uart.write:
          id: uart_bus
          data: !lambda |-
              std::size_t pos;
              std::string str = "\rMain.Volume=" + std::to_string(x) + "\r";
              while ((pos = str.find("\\r")) != std::string::npos)
                str.replace(pos, 2, "\r");
              std::vector<uint8_t> vec(str.begin(), str.end());
              return vec; 

button:
  - platform: template
    name: "Vol Up"
    icon: "mdi:volume-plus"
    on_press:
      - uart.write: "\rMain.Volume+\r"

  - platform: template
    name: "Vol Down"
    icon: "mdi:volume-minus"
    on_press:
      - uart.write: "\rMain.Volume-\r"
    
  - platform: template
    name: "Vol ?"
    icon: "mdi:volume-equal"
    on_press:
      - uart.write: "\rMain.Volume?\r"

switch:
  - platform: template
    name: "Power"
    icon: "mdi:audio-video"
    lambda: |-
      if (id(uart_readline).state == "Main.Power=On") {
        return true;
      } else if(id(uart_readline).state == "Main.Power=Off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Power=On\r"
    turn_off_action:
      - uart.write: "\rMain.Power=Off\r"

  - platform: template
    name: "Speaker A"
    icon: "mdi:speaker"
    lambda: |-
      if (id(uart_readline).state == "Main.Speakera=On") {
        return true;
      } else if(id(uart_readline).state == "Main.Speakera=Off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.SpeakerA=On\r"
    turn_off_action:
      - uart.write: "\rMain.SpeakerA=Off\r"

  - platform: template
    name: "Speaker B"
    icon: "mdi:speaker"
    lambda: |-
      if (id(uart_readline).state == "Main.Speakerb=On") {
        return true;
      } else if(id(uart_readline).state == "Main.Speakerb=Off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Speakerb=On\r"
    turn_off_action:
      - uart.write: "\rMain.Speakerb=Off\r"

  - platform: template
    name: "Mute"
    icon: "mdi:volume-off"
    lambda: |-
      if (id(uart_readline).state == "Main.Mute=On") {
        return true;
      } else if(id(uart_readline).state == "Main.Mute=Off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Mute=On\r"
    turn_off_action:
      - uart.write: "\rMain.Mute=Off\r"

  - platform: template
    name: "Source Optical 1"
    id: source_optical1
    icon: "mdi:disc"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=1") {
        return true;
      } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Source=1\r"
    turn_off_action:
      - uart.write: "\rMain.Source=1\r"

  #### UNCOMENT TO ADD SOURCE #####
  # - platform: template
  #   name: "Source Optical 2"
  #   id: source_optical2
  #   icon: "mdi:audio-input-rca"
  #   lambda: |-
  #     if (id(uart_readline).state == "Main.Source=2") {
  #       return true;
  #     } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
  #       return false;
  #     } else {
  #       return {};
  #     }
  #   turn_on_action:
  #     - uart.write: "\rMain.Source=2\r"
  #   turn_off_action:
  #     - uart.write: "\rMain.Source=2\r"

  - platform: template
    name: "Source Coaxial 1"
    id: source_coaxial1
    icon: "mdi:audio-input-rca"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=3") {
        return true;
      } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Source=3\r"
    turn_off_action:
      - uart.write: "\rMain.Source=3\r"

  #### UNCOMENT TO ADD SOURCE #####
  # - platform: template
  #   name: "Source Coaxial 2"
  #   id: source_coaxial2
  #   icon: "mdi:audio-input-rca"
  #   lambda: |-
  #     if (id(uart_readline).state == "Main.Source=4") {
  #       return true;
  #     } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
  #       return false;
  #     } else {
  #       return {};
  #     }
  #   turn_on_action:
  #     - uart.write: "\rMain.Source=4\r"
  #   turn_off_action:
  #     - uart.write: "\rMain.Source=4\r"

  #### UNCOMENT TO ADD SOURCE #####
  # - platform: template
  #   name: "Source Phono"
  #   id: source_phono
  #   icon: "mdi:audio-input-rca"
  #   lambda: |-
  #     if (id(uart_readline).state == "Main.Source=5") {
  #       return true;
  #     } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
  #       return false;
  #     } else {
  #       return {};
  #     }
  #   turn_on_action:
  #     - uart.write: "\rMain.Source=5\r"
  #   turn_off_action:
  #     - uart.write: "\rMain.Source=5\r"

    #### UNCOMENT TO ADD SOURCE #####
  # - platform: template
  #   name: "Source Line 1"
  #   id: source_line1
  #   icon: "mdi:audio-input-rca"
  #   lambda: |-
  #     if (id(uart_readline).state == "Main.Source=6") {
  #       return true;
  #     } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
  #       return false;
  #     } else {
  #       return {};
  #     }
  #   turn_on_action:
  #     - uart.write: "\rMain.Source=6\r"
  #   turn_off_action:
  #     - uart.write: "\rMain.Source=6\r"

      #### UNCOMENT TO ADD SOURCE #####
  # - platform: template
  #   name: "Source Line 2"
  #   id: source_line2
  #   icon: "mdi:audio-input-rca"
  #   lambda: |-
  #     if (id(uart_readline).state == "Main.Source=7") {
  #       return true;
  #     } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
  #       return false;
  #     } else {
  #       return {};
  #     }
  #   turn_on_action:
  #     - uart.write: "\rMain.Source=7\r"
  #   turn_off_action:
  #     - uart.write: "\rMain.Source=7\r"

      #### UNCOMENT TO ADD SOURCE #####
  # - platform: template
  #   name: "Source Bluetooth"
  #   id: source_bluetooth
  #   icon: "mdi:audio-input-rca"
  #   lambda: |-
  #     if (id(uart_readline).state == "Main.Source=8") {
  #       return true;
  #     } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
  #       return false;
  #     } else {
  #       return {};
  #     }
  #   turn_on_action:
  #     - uart.write: "\rMain.Source=8\r"
  #   turn_off_action:
  #     - uart.write: "\rMain.Source=8\r"

