substitutions:
  devicename: nad
  upper_devicename: NAD

esphome:
  name: nad-amplifier-remote
  friendly_name: NAD amplifier remote
  includes:
    - uart_read_line_sensor.h
  on_boot:
    then:
      - uart.write: "\rMain.Power?\r"
      - uart.write: "\rMain.SpeakerA?\r"
      - uart.write: "\rMain.SpeakerB?\r"
      - uart.write: "\rMain.Mute?\r"
      - uart.write: "\rMain.Source?\r"

esp8266:
  board: d1_mini_lite

# Enable logging
logger:
  level: VERBOSE #makes uart stream available in esphome logstream
  baud_rate: 0 #disable logging over uart

# Enable Home Assistant API
api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
    
uart:
  id: uart_bus
  rx_pin: D3
  tx_pin: D4
  baud_rate: 115200

text_sensor:
- platform: custom
  lambda: |-
    auto my_custom_sensor = new UartReadLineSensor(id(uart_bus));
    App.register_component(my_custom_sensor);
    return {my_custom_sensor};
  text_sensors:
    id: "uart_readline"

button:
  - platform: template
    name: "Vol Up"
    icon: "mdi:volume-plus"
    on_press:
      - uart.write: "\rMain.Volume+\r"

  - platform: template
    name: "Vol Down"
    icon: "mdi:volume-minus"
    on_press:
      - uart.write: "\rMain.Volume-\r"

switch:
  - platform: template
    name: "Power"
    icon: "mdi:audio-video"
    lambda: |-
      if (id(uart_readline).state == "Main.Power=On") {
        return true;
      } else if(id(uart_readline).state == "Main.Power=Off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Power=On\r"
    turn_off_action:
      - uart.write: "\rMain.Power=Off\r"

  - platform: template
    name: "Speaker A"
    icon: "mdi:speaker"
    lambda: |-
      if (id(uart_readline).state == "Main.Speakera=On") {
        return true;
      } else if(id(uart_readline).state == "Main.Speakera=Off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.SpeakerA=On\r"
    turn_off_action:
      - uart.write: "\rMain.SpeakerA=Off\r"

  - platform: template
    name: "Speaker B"
    icon: "mdi:speaker"
    lambda: |-
      if (id(uart_readline).state == "Main.Speakerb=On") {
        return true;
      } else if(id(uart_readline).state == "Main.Speakerb=Off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Speakerb=On\r"
    turn_off_action:
      - uart.write: "\rMain.Speakerb=Off\r"

  - platform: template
    name: "Mute"
    icon: "mdi:volume-off"
    lambda: |-
      if (id(uart_readline).state == "Main.Mute=On") {
        return true;
      } else if(id(uart_readline).state == "Main.Mute=Off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Mute=On\r"
    turn_off_action:
      - uart.write: "\rMain.Mute=Off\r"

  - platform: template
    name: "Source CD"
    icon: "mdi:disc"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=CD") {
        return true;
      } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Source=CD\r"
    turn_off_action:
      - uart.write: "\rMain.Source=CD\r"

  - platform: template
    name: "Source AUX"
    icon: "mdi:audio-input-rca"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=AUX") {
        return true;
      } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Source=Aux\r"
    turn_off_action:
      - uart.write: "\rMain.Source=Aux\r"

  - platform: template
    name: "Source Tuner"
    icon: "mdi:audio-input-rca"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=TUNER") {
        return true;
      } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Source=TUNER\r"
    turn_off_action:
      - uart.write: "\rMain.Source=TUNER\r"

  - platform: template
    name: "Source MP"
    icon: "mdi:audio-input-stereo-minijack"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=MP") {
        return true;
      } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Source=MP\r"
    turn_off_action:
      - uart.write: "\rMain.Source=MP\r"

  - platform: template
    name: "Source Disc"
    icon: "mdi:minidisc"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=DISC/MDC") {
        return true;
      } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Source=DISC/MDC\r"
    turn_off_action:
      - uart.write: "\rMain.Source=DISC/MDC\r"

  - platform: template
    name: "Source Tape2"
    icon: "mdi:cassette"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=TAPE2") {
        return true;
      } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Source=TAPE2\r"
    turn_off_action:
      - uart.write: "\rMain.Source=TAPE2\r"

