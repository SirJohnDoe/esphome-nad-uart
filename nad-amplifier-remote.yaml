substitutions:
  devicename: nad
  upper_devicename: NAD

esphome:
  name: "nadrs232"
  friendly_name: NAD Amp Controller
  min_version: 2025.2.0
  name_add_mac_suffix: false
  on_boot:
    then:
      - uart.write: "\rMain.Power?\r"
      - delay: 1s
      - uart.write: "\rMain.SpeakerA?\r"
      - delay: 1s
      - uart.write: "\rMain.SpeakerB?\r"
      - delay: 1s
      - uart.write: "\rMain.Mute?\r"
      - delay: 1s
      - uart.write: "\rMain.Source?\r"
      - delay: 1s
      - uart.write: "\rMain.Volume?\r"

esp8266:
  board: d1_mini_lite

# Enable logging
logger:
  level: VERBOSE #makes uart stream available in esphome logstream
  baud_rate: 0 #disable logging over uart

# Enable Home Assistant API
api:
  services:
  - service: write
    variables:
      command: string
    then:
      - uart.write:
          id: uart_bus
          data: !lambda |-
              std::size_t pos;
              std::string str = command;
              while ((pos = str.find("\\r")) != std::string::npos)
                str.replace(pos, 2, "\r");
              std::vector<uint8_t> vec(str.begin(), str.end());
              return vec; 
              
ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

external_components:
  - source: components
    
uart:
  id: uart_bus
  rx_pin: 0
  tx_pin: 2
  baud_rate: 115200

text_sensor:
  - platform: uart_read_line_sensor
    id: uart_readline

interval:
  - interval: 5s
    then:
      - lambda: |-
          std::string sensorState = id(uart_readline).state;
          if (sensorState.length() > 0) {
            size_t index = sensorState.find("Main.Volume=");
            if (index != std::string::npos) {
              std::string floatValueStr = sensorState.substr(index + 12);
              float floatValue = atof(floatValueStr.c_str());
              id(current_volume).publish_state(floatValue);
            }
          }

number:
  - platform: template
    name: "Volume"
    id: current_volume
    min_value: -80
    max_value: 12
    step: 0.5
    icon: "mdi:volume-high"
    set_action:
      then:
      - uart.write:
          id: uart_bus
          data: !lambda |-
              std::size_t pos;
              std::string str = "\rMain.Volume=" + std::to_string(x) + "\r";
              while ((pos = str.find("\\r")) != std::string::npos)
                str.replace(pos, 2, "\r");
              std::vector<uint8_t> vec(str.begin(), str.end());
              return vec;

select:
  - platform: template
    name: "Source"
    id: sources
    icon: "mdi:format-list-checks"
    update_interval: 10s
    options:
      - "AV Receiver"
      - "Drumstel"
      - "Platenspeler"
      - "WiiM Pro"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=1") {
        return {"WiiM Pro"};
      } else if(id(uart_readline).state == "Main.Source=5") {
        return {"Platenspeler"};
      } else if(id(uart_readline).state == "Main.Source=6") {
        return {"AV Receiver"};
      } else if(id(uart_readline).state == "Main.Source=7") {
        return {"Drumstel"};
      } else {
        return {};
      }
    set_action:
      - if:
          condition:
            - lambda: 'return x == "AV Receiver";'
          then:
            - uart.write: "\rMain.Source=6\r"
            - delay: 1s
            - uart.write: "\rMain.Volume?\r"
      - if:
          condition:
            - lambda: 'return x == "Drumstel";'
          then:
            - uart.write: "\rMain.Source=7\r"
            - delay: 1s
            - uart.write: "\rMain.Volume?\r"
      - if:
          condition:
            - lambda: 'return x == "Platenspeler";'
          then:
            - uart.write: "\rMain.Source=5\r"
            - delay: 1s
            - uart.write: "\rMain.Volume?\r"
      - if:
          condition:
            - lambda: 'return x == "WiiM Pro";'
          then:
            - uart.write: "\rMain.Source=1\r"
            - delay: 1s
            - uart.write: "\rMain.Volume?\r"
            
button:
  - platform: template
    name: "Volume Higher"
    icon: "mdi:volume-plus"
    on_press:
      - uart.write: "\rMain.Volume+\r"

  - platform: template
    name: "Volume Lower"
    icon: "mdi:volume-minus"
    on_press:
      - uart.write: "\rMain.Volume-\r"
    
#  - platform: template
#    name: "Volume ?"
#    icon: "mdi:volume-equal"
#    on_press:
#      - uart.write: "\rMain.Volume?\r"

switch:
  - platform: template
    name: "Power"
    icon: "mdi:audio-video"
    lambda: |-
      if (id(uart_readline).state == "Main.Power=On") {
        return true;
      } else if(id(uart_readline).state == "Main.Power=Off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Power=On\r"
    turn_off_action:
      - uart.write: "\rMain.Power=Off\r"

  - platform: template
    name: "Speaker A"
    icon: "mdi:speaker"
    lambda: |-
      if (id(uart_readline).state == "Main.SpeakerA=On") {
        return true;
      } else if(id(uart_readline).state == "Main.SpeakerA=Off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.SpeakerA=On\r"
    turn_off_action:
      - uart.write: "\rMain.SpeakerA=Off\r"

  - platform: template
    name: "Speaker B"
    icon: "mdi:speaker"
    lambda: |-
      if (id(uart_readline).state == "Main.SpeakerB=On") {
        return true;
      } else if(id(uart_readline).state == "Main.SpeakerB=Off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.SpeakerB=On\r"
    turn_off_action:
      - uart.write: "\rMain.SpeakerB=Off\r"

  - platform: template
    name: "Volume Mute"
    icon: "mdi:volume-off"
    lambda: |-
      if (id(uart_readline).state == "Main.Mute=On") {
        return true;
      } else if(id(uart_readline).state == "Main.Mute=Off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Mute=On\r"
    turn_off_action:
      - uart.write: "\rMain.Mute=Off\r"

  - platform: template
    name: "Source - WiiM Pro"
    id: source_optical1
    icon: "mdi:toslink"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=1") {
        return true;
      } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Source=1\r"
    turn_off_action:
      - uart.write: "\rMain.Source=1\r"

  #### UNCOMENT TO ADD SOURCE #####
  # - platform: template
  #   name: "Source Optical 2"
  #   id: source_optical2
  #   icon: "mdi:toslink"
  #   lambda: |-
  #     if (id(uart_readline).state == "Main.Source=2") {
  #       return true;
  #     } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
  #       return false;
  #     } else {
  #       return {};
  #     }
  #   turn_on_action:
  #     - uart.write: "\rMain.Source=2\r"
  #   turn_off_action:
  #     - uart.write: "\rMain.Source=2\r"

  # - platform: template
  #   name: "Source Coaxial 1"
  #   id: source_coaxial1
  #   icon: "mdi:audio-input-rca"
  #   lambda: |-
  #     if (id(uart_readline).state == "Main.Source=3") {
  #       return true;
  #     } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
  #       return false;
  #     } else {
  #       return {};
  #     }
  #   turn_on_action:
  #     - uart.write: "\rMain.Source=3\r"
  #   turn_off_action:
  #     - uart.write: "\rMain.Source=3\r"

  #### UNCOMENT TO ADD SOURCE #####
  # - platform: template
  #   name: "Source Coaxial 2"
  #   id: source_coaxial2
  #   icon: "mdi:audio-input-rca"
  #   lambda: |-
  #     if (id(uart_readline).state == "Main.Source=4") {
  #       return true;
  #     } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
  #       return false;
  #     } else {
  #       return {};
  #     }
  #   turn_on_action:
  #     - uart.write: "\rMain.Source=4\r"
  #   turn_off_action:
  #     - uart.write: "\rMain.Source=4\r"

  #### UNCOMENT TO ADD SOURCE #####
  - platform: template
    name: "Source - Platenspeler"
    id: source_phono
    icon: "mdi:album"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=5") {
        return true;
      } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Source=5\r"
    turn_off_action:
      - uart.write: "\rMain.Source=5\r"

    #### UNCOMENT TO ADD SOURCE #####
  - platform: template
    name: "Source - AV Receiver"
    id: source_line1
    icon: "mdi:audio-input-stereo-minijack"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=6") {
        return true;
      } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Source=6\r"
    turn_off_action:
      - uart.write: "\rMain.Source=6\r"

      #### UNCOMENT TO ADD SOURCE #####
  - platform: template
    name: "Source - Drumstel"
    id: source_line2
    icon: "mdi:audio-input-stereo-minijack"
    lambda: |-
      if (id(uart_readline).state == "Main.Source=7") {
        return true;
      } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "\rMain.Source=7\r"
    turn_off_action:
      - uart.write: "\rMain.Source=7\r"

      #### UNCOMENT TO ADD SOURCE #####
  # - platform: template
  #   name: "Source Bluetooth"
  #   id: source_bluetooth
  #   icon: "mdi:bluetooth-audio"
  #   lambda: |-
  #     if (id(uart_readline).state == "Main.Source=8") {
  #       return true;
  #     } else if(id(uart_readline).state.substr(0,12) == "Main.Source=") {
  #       return false;
  #     } else {
  #       return {};
  #     }
  #   turn_on_action:
  #     - uart.write: "\rMain.Source=8\r"
  #   turn_off_action:
  #     - uart.write: "\rMain.Source=8\r"
